# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protocolo_pb2 as protocolo__pb2


class TesteServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.findtitleMsg = channel.unary_unary(
                '/messages.TesteService/findtitleMsg',
                request_serializer=protocolo__pb2.FindTitle.SerializeToString,
                response_deserializer=protocolo__pb2.Movie.FromString,
                )
        self.findcategoryMsg = channel.unary_unary(
                '/messages.TesteService/findcategoryMsg',
                request_serializer=protocolo__pb2.FindCategory.SerializeToString,
                response_deserializer=protocolo__pb2.FindResponse.FromString,
                )
        self.findactorMsg = channel.unary_unary(
                '/messages.TesteService/findactorMsg',
                request_serializer=protocolo__pb2.FindActor.SerializeToString,
                response_deserializer=protocolo__pb2.FindResponse.FromString,
                )
        self.createMsg = channel.unary_unary(
                '/messages.TesteService/createMsg',
                request_serializer=protocolo__pb2.Create.SerializeToString,
                response_deserializer=protocolo__pb2.Movie.FromString,
                )
        self.updateMsg = channel.unary_unary(
                '/messages.TesteService/updateMsg',
                request_serializer=protocolo__pb2.Update.SerializeToString,
                response_deserializer=protocolo__pb2.Movie.FromString,
                )
        self.deleteMsg = channel.unary_unary(
                '/messages.TesteService/deleteMsg',
                request_serializer=protocolo__pb2.Delete.SerializeToString,
                response_deserializer=protocolo__pb2.Response.FromString,
                )


class TesteServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def findtitleMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findcategoryMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findactorMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TesteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'findtitleMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.findtitleMsg,
                    request_deserializer=protocolo__pb2.FindTitle.FromString,
                    response_serializer=protocolo__pb2.Movie.SerializeToString,
            ),
            'findcategoryMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.findcategoryMsg,
                    request_deserializer=protocolo__pb2.FindCategory.FromString,
                    response_serializer=protocolo__pb2.FindResponse.SerializeToString,
            ),
            'findactorMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.findactorMsg,
                    request_deserializer=protocolo__pb2.FindActor.FromString,
                    response_serializer=protocolo__pb2.FindResponse.SerializeToString,
            ),
            'createMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.createMsg,
                    request_deserializer=protocolo__pb2.Create.FromString,
                    response_serializer=protocolo__pb2.Movie.SerializeToString,
            ),
            'updateMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.updateMsg,
                    request_deserializer=protocolo__pb2.Update.FromString,
                    response_serializer=protocolo__pb2.Movie.SerializeToString,
            ),
            'deleteMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteMsg,
                    request_deserializer=protocolo__pb2.Delete.FromString,
                    response_serializer=protocolo__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messages.TesteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TesteService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def findtitleMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.TesteService/findtitleMsg',
            protocolo__pb2.FindTitle.SerializeToString,
            protocolo__pb2.Movie.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findcategoryMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.TesteService/findcategoryMsg',
            protocolo__pb2.FindCategory.SerializeToString,
            protocolo__pb2.FindResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findactorMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.TesteService/findactorMsg',
            protocolo__pb2.FindActor.SerializeToString,
            protocolo__pb2.FindResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.TesteService/createMsg',
            protocolo__pb2.Create.SerializeToString,
            protocolo__pb2.Movie.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.TesteService/updateMsg',
            protocolo__pb2.Update.SerializeToString,
            protocolo__pb2.Movie.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.TesteService/deleteMsg',
            protocolo__pb2.Delete.SerializeToString,
            protocolo__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
